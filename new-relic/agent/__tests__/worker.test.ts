import { NrHarvestWorker, NrEndpoint, UrlBuilder } from '../harvest/worker'
import { NrEvent } from '../harvest/models/event'
import { NrEventBufferSerializer } from '../harvest/serializers/event-ser'
import { BUFFER_SIZE_DELTA, HARVEST_TIME_DELTA, MAX_HARVEST_TIME, MIN_BUFFER_SIZE } from '../harvest/constants'

// @ts-ignore
//console._nrLog = jest.fn(() => {});
console._nrLog = console.log;

// Mock fetch function used by the harvest worker
let reqStatus = 0
global._nrFetch = jest.fn(async function () {
    return new Promise((resolve, _reject) => {
        resolve({
            status: reqStatus,
            json: () => "{}"
        })
    })
})

// To sync with other tasks running (mainly the harvest timer)
async function sync() {
    return new Promise(resolve => setTimeout(resolve, 0));
}

describe('harvest worker', () => {

    // Generate a test event and put into the buffer
    function addTestEvent(i: number) {
        let ev = new NrEvent("Test", {"index": i})
        let wasBuffered = nrWorker.buffer.put(ev)
        expect(wasBuffered).toBe(true)
    }

    const API_KEY = ""
    const ACCOUNT_ID = ""
    const ENDPOINT = NrEndpoint.US
    const HARVEST_TIME = MAX_HARVEST_TIME - HARVEST_TIME_DELTA * 3
    const BUFFER_SIZE = MIN_BUFFER_SIZE + BUFFER_SIZE_DELTA * 3
    const SERIALIZER = new NrEventBufferSerializer()
    const URL_BUILDER: UrlBuilder = () => ""
    
    let nrWorker = new NrHarvestWorker<NrEvent>(
        API_KEY,
        ACCOUNT_ID,
        ENDPOINT,
        HARVEST_TIME,
        BUFFER_SIZE,
        SERIALIZER,
        URL_BUILDER
    )

    nrWorker.cancelHarvest()

    afterAll(() => {
        setTimeout(() => {
            nrWorker.cancelHarvest()
        }, 500)
    })

    test('insert samples', () => {
        expect(nrWorker.buffer.length()).toBe(0)
        
        for (let i = 0 ; i < BUFFER_SIZE / 2 ; i ++) {
            addTestEvent(i)
        }
        
        expect(nrWorker.buffer.length()).toBe(BUFFER_SIZE / 2)
        
        for (let i = 0 ; i < BUFFER_SIZE / 2 ; i ++) {
            addTestEvent(i + BUFFER_SIZE / 2)
        }

        expect(nrWorker.buffer.length()).toBe(BUFFER_SIZE)
    })

    // NOTE: Use initial data generated by the "insert samples" test
    test('API error big payload', async () => {
        nrWorker.cancelHarvest()

        // Initial size
        expect(nrWorker.buffer.getSize()).toBe(BUFFER_SIZE)

        // Size after first 413 error
        reqStatus = 413
        nrWorker.harvestNow()
        await sync()
        nrWorker.cancelHarvest()
        expect(nrWorker.buffer.getSize()).toBe(BUFFER_SIZE - BUFFER_SIZE_DELTA)

        // Size after second 413 error
        reqStatus = 413
        nrWorker.harvestNow()
        await sync()
        nrWorker.cancelHarvest()
        expect(nrWorker.buffer.getSize()).toBe(BUFFER_SIZE - BUFFER_SIZE_DELTA * 2)

        // Size after third 413 error
        reqStatus = 413
        nrWorker.harvestNow()
        await sync()
        nrWorker.cancelHarvest()
        expect(nrWorker.buffer.getSize()).toBe(BUFFER_SIZE - BUFFER_SIZE_DELTA * 3)

        // Size after fourth 413 error (reached the limit of min size)
        reqStatus = 413
        nrWorker.harvestNow()
        await sync()
        nrWorker.cancelHarvest()
        expect(nrWorker.buffer.getSize()).toBe(BUFFER_SIZE - BUFFER_SIZE_DELTA * 3)

        // Size after first 200 ok
        reqStatus = 200
        nrWorker.harvestNow()
        await sync()
        nrWorker.cancelHarvest()
        expect(nrWorker.buffer.getSize()).toBe(BUFFER_SIZE - BUFFER_SIZE_DELTA * 2)

        // ok cleared the buffer, generate data again
        addTestEvent(0) ; addTestEvent(1) ; addTestEvent(2) ; addTestEvent(3) ; addTestEvent(4)
        addTestEvent(5) ; addTestEvent(6) ; addTestEvent(7) ; addTestEvent(8) ; addTestEvent(9)

        // Size after second 200 ok
        reqStatus = 200
        nrWorker.harvestNow()
        await sync()
        nrWorker.cancelHarvest()
        expect(nrWorker.buffer.getSize()).toBe(BUFFER_SIZE - BUFFER_SIZE_DELTA)

        // ok cleared the buffer, generate data again
        addTestEvent(0) ; addTestEvent(1) ; addTestEvent(2) ; addTestEvent(3) ; addTestEvent(4)
        addTestEvent(5) ; addTestEvent(6) ; addTestEvent(7) ; addTestEvent(8) ; addTestEvent(9)

        // Size after third 200 ok
        reqStatus = 200
        nrWorker.harvestNow()
        await sync()
        nrWorker.cancelHarvest()
        expect(nrWorker.buffer.getSize()).toBe(BUFFER_SIZE)

        // ok cleared the buffer, generate data again
        addTestEvent(0) ; addTestEvent(1) ; addTestEvent(2) ; addTestEvent(3) ; addTestEvent(4)
        addTestEvent(5) ; addTestEvent(6) ; addTestEvent(7) ; addTestEvent(8) ; addTestEvent(9)

        // Size after fourth 200 ok, already reached the normal buffer size
        reqStatus = 200
        nrWorker.harvestNow()
        await sync()
        nrWorker.cancelHarvest()
        expect(nrWorker.buffer.getSize()).toBe(BUFFER_SIZE)
    })

    test('API error too many requests', async () => {
        // generate initial data
        addTestEvent(0) ; addTestEvent(1) ; addTestEvent(2) ; addTestEvent(3) ; addTestEvent(4)
        addTestEvent(5) ; addTestEvent(6) ; addTestEvent(7) ; addTestEvent(8) ; addTestEvent(9)
        
        // Initial harvest time
        expect(nrWorker.getHarvestDuration()).toBe(HARVEST_TIME)

        // Size after first 429 error
        reqStatus = 429
        nrWorker.harvestNow()
        await sync()
        nrWorker.cancelHarvest()
        expect(nrWorker.getHarvestDuration()).toBe(HARVEST_TIME + HARVEST_TIME_DELTA)

        // Size after second 429 error
        reqStatus = 429
        nrWorker.harvestNow()
        await sync()
        nrWorker.cancelHarvest()
        expect(nrWorker.getHarvestDuration()).toBe(HARVEST_TIME + HARVEST_TIME_DELTA * 2)

        // Size after third 429 error
        reqStatus = 429
        nrWorker.harvestNow()
        await sync()
        nrWorker.cancelHarvest()
        expect(nrWorker.getHarvestDuration()).toBe(HARVEST_TIME + HARVEST_TIME_DELTA * 3)

        // Size after fourth 429 error (reached the max harvest time)
        reqStatus = 429
        nrWorker.harvestNow()
        await sync()
        nrWorker.cancelHarvest()
        expect(nrWorker.getHarvestDuration()).toBe(HARVEST_TIME + HARVEST_TIME_DELTA * 3)

        // Size after first 200 ok
        reqStatus = 200
        nrWorker.harvestNow()
        await sync()
        nrWorker.cancelHarvest()
        expect(nrWorker.getHarvestDuration()).toBe(HARVEST_TIME + HARVEST_TIME_DELTA * 2)

        // ok cleared the buffer, generate data again
        addTestEvent(0) ; addTestEvent(1) ; addTestEvent(2) ; addTestEvent(3) ; addTestEvent(4)
        addTestEvent(5) ; addTestEvent(6) ; addTestEvent(7) ; addTestEvent(8) ; addTestEvent(9)

        // Size after second 200 ok
        reqStatus = 200
        nrWorker.harvestNow()
        await sync()
        nrWorker.cancelHarvest()
        expect(nrWorker.getHarvestDuration()).toBe(HARVEST_TIME + HARVEST_TIME_DELTA)

        // ok cleared the buffer, generate data again
        addTestEvent(0) ; addTestEvent(1) ; addTestEvent(2) ; addTestEvent(3) ; addTestEvent(4)
        addTestEvent(5) ; addTestEvent(6) ; addTestEvent(7) ; addTestEvent(8) ; addTestEvent(9)

        // Size after third 200 ok
        reqStatus = 200
        nrWorker.harvestNow()
        await sync()
        nrWorker.cancelHarvest()
        expect(nrWorker.getHarvestDuration()).toBe(HARVEST_TIME)

        // ok cleared the buffer, generate data again
        addTestEvent(0) ; addTestEvent(1) ; addTestEvent(2) ; addTestEvent(3) ; addTestEvent(4)
        addTestEvent(5) ; addTestEvent(6) ; addTestEvent(7) ; addTestEvent(8) ; addTestEvent(9)

        // Size after fourth 200 ok
        reqStatus = 200
        nrWorker.harvestNow()
        await sync()
        nrWorker.cancelHarvest()
        expect(nrWorker.getHarvestDuration()).toBe(HARVEST_TIME)
    })
})